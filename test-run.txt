++ dirname /home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
+ . /home/mobaxterm/Documents/git/ai-rizz/tests/unit/../common.sh
++ MANIFEST_FILE=test_manifest.inf
++ SOURCE_REPO=test_repo
++ TARGET_DIR=test_target
++ SHARED_DIR=shared
++ CONFIG_DIR=/home/mobaxterm/.config/ai-rizz
++ COMMIT_MANIFEST_FILE=ai-rizz.inf
++ LOCAL_MANIFEST_FILE=ai-rizz.local.inf
++ LOCAL_DIR=local
++ COMMITTED_GLYPH=●
++ LOCAL_GLYPH=◐
++ UNINSTALLED_GLYPH=○
+ source_ai_rizz
+ _TEST_MANIFEST_FILE=test_manifest.inf
+ _TEST_SOURCE_REPO=test_repo
+ _TEST_TARGET_DIR=test_target
+ _TEST_REPO_DIR=
+ '[' -n '' ']'
+ '[' -f ./ai-rizz ']'
+ AI_RIZZ_PATH=./ai-rizz
+ echo 'Sourcing ai-rizz from: ./ai-rizz'
Sourcing ai-rizz from: ./ai-rizz
+ . ./ai-rizz
++ set -e
++ COMMIT_MANIFEST_FILE=ai-rizz.inf
++ LOCAL_MANIFEST_FILE=ai-rizz.local.inf
++ SHARED_DIR=shared
++ LOCAL_DIR=local
++ CONFIG_DIR=/home/mobaxterm/.config/ai-rizz
++ DEFAULT_TARGET_DIR=.cursor/rules
++ HAS_COMMIT_MODE=false
++ HAS_LOCAL_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=
++ COMMITTED_GLYPH=●
++ UNINSTALLED_GLYPH=○
++ LOCAL_GLYPH=◐
++ '[' test_conflict_resolution.test.sh = ai-rizz ']'
+ MANIFEST_FILE=test_manifest.inf
+ SOURCE_REPO=test_repo
+ TARGET_DIR=test_target
+ REPO_DIR=
+ reset_ai_rizz_state
+ HAS_LOCAL_MODE=false
+ HAS_COMMIT_MODE=false
+ COMMIT_SOURCE_REPO=
+ LOCAL_SOURCE_REPO=
+ COMMIT_TARGET_DIR=
+ LOCAL_TARGET_DIR=
++ dirname /home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
+ . /home/mobaxterm/Documents/git/ai-rizz/tests/unit/../../shunit2
++ test -n ''
++ SHUNIT_VERSION=2.1.9pre
++ SHUNIT_TRUE=0
++ SHUNIT_FALSE=1
++ SHUNIT_ERROR=2
++ __SHUNIT_BUILTIN=builtin
++ builtin echo 123
++ __SHUNIT_CMD_ECHO_ESC='echo -e'
+++ echo -e test
++ builtin '[' test = '-e test' ']'
++ __SHUNIT_CMD_DATE_SECONDS='date +%s.%N'
+++ date +%N
++ builtin '[' 892407137 = %N ']'
++ __SHUNIT_CMD_BC=bc
++ bc --help
++ __SHUNIT_CMD_BC='busybox bc'
++ busybox bc --help
++ __SHUNIT_CMD_DC=dc
++ dc --help
++ __SHUNIT_CMD_DC='busybox dc'
++ busybox dc --help
++ __SHUNIT_CMD_CALC=_shunit_calc_bc
++ _shunit_calc_bc 1 + 2
++ _shunit_calc_bc 1 + 2
++ __SHUNIT_CMD_TPUT=tput
++ SHUNIT_CMD_TPUT=tput
++ SHUNIT_COLOR=auto
++ __SHUNIT_MODE_SOURCED=sourced
++ __SHUNIT_MODE_STANDALONE=standalone
++ __SHUNIT_PARENT=/home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
++ __SHUNIT_TEST_PREFIX=
++ __SHUNIT_ANSI_NONE='\033[0m'
++ __SHUNIT_ANSI_RED='\033[1;31m'
++ __SHUNIT_ANSI_GREEN='\033[1;32m'
++ __SHUNIT_ANSI_YELLOW='\033[1;33m'
++ __SHUNIT_ANSI_CYAN='\033[1;36m'
++ __shunit_lineno=
++ __shunit_mode=sourced
++ __shunit_reportGenerated=1
++ __shunit_script=
++ __shunit_skip=1
++ __shunit_suite=
++ __shunit_clean=1
++ __shunit_suiteName=
++ __shunit_xmlSuiteName=
++ __shunit_junitXmlOutputFile=
++ __shunit_junitXmlTestCases=
++ __shunit_junitXmlCurrentTestCaseErrors=
++ __shunit_startSuiteTime=
++ __shunit_endSuiteTime=
++ __shunit_startCaseTime=
++ __shunit_endCaseTime=
++ __shunit_ansi_none=
++ __shunit_ansi_red=
++ __shunit_ansi_green=
++ __shunit_ansi_yellow=
++ __shunit_ansi_cyan=
++ __shunit_testSuccess=0
++ __shunit_testsTotal=0
++ __shunit_testsPassed=0
++ __shunit_testsFailed=0
++ __shunit_assertsTotal=0
++ __shunit_assertsPassed=0
++ __shunit_assertsFailed=0
++ __shunit_assertsSkipped=0
++ __shunit_assertsCurrentTest=0
++ _SHUNIT_LINENO_='eval __shunit_lineno=""; if ${__SHUNIT_BUILTIN} [ "${1:-}" = "--lineno" ] && ${__SHUNIT_BUILTIN} [ -n "${2:-}" ]; then __shunit_lineno="[${2}]"; shift 2; fi;'
++ builtin '[' -n '' ']'
+++ set
+++ grep '^__SHUNIT_'
+++ cut -d= -f1
++ __shunit_constants='__SHUNIT_ANSI_CYAN
__SHUNIT_ANSI_GREEN
__SHUNIT_ANSI_NONE
__SHUNIT_ANSI_RED
__SHUNIT_ANSI_YELLOW
__SHUNIT_BUILTIN
__SHUNIT_CMD_BC
__SHUNIT_CMD_CALC
__SHUNIT_CMD_DATE_SECONDS
__SHUNIT_CMD_DC
__SHUNIT_CMD_ECHO_ESC
__SHUNIT_CMD_TPUT
__SHUNIT_MODE_SOURCED
__SHUNIT_MODE_STANDALONE
__SHUNIT_PARENT
__SHUNIT_TEST_PREFIX'
++ echo '__SHUNIT_ANSI_CYAN
__SHUNIT_ANSI_GREEN
__SHUNIT_ANSI_NONE
__SHUNIT_ANSI_RED
__SHUNIT_ANSI_YELLOW
__SHUNIT_BUILTIN
__SHUNIT_CMD_BC
__SHUNIT_CMD_CALC
__SHUNIT_CMD_DATE_SECONDS
__SHUNIT_CMD_DC
__SHUNIT_CMD_ECHO_ESC
__SHUNIT_CMD_TPUT
__SHUNIT_MODE_SOURCED
__SHUNIT_MODE_STANDALONE
__SHUNIT_PARENT
__SHUNIT_TEST_PREFIX'
++ grep '^Binary file'
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_ANSI_CYAN
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_ANSI_GREEN
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_ANSI_NONE
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_ANSI_RED
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_ANSI_YELLOW
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_BUILTIN
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_BC
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_CALC
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_DATE_SECONDS
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_DC
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_ECHO_ESC
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_CMD_TPUT
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_MODE_SOURCED
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_MODE_STANDALONE
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_PARENT
++ for __shunit_const in ${__shunit_constants}
++ builtin '[' -z '' ']'
++ readonly __SHUNIT_TEST_PREFIX
++ unset __shunit_const __shunit_constants
++ _ASSERT_EQUALS_='eval assertEquals --lineno "${LINENO:-}"'
++ _ASSERT_NOT_EQUALS_='eval assertNotEquals --lineno "${LINENO:-}"'
++ _ASSERT_CONTAINS_='eval assertContains --lineno "${LINENO:-}"'
++ _ASSERT_NOT_CONTAINS_='eval assertNotContains --lineno "${LINENO:-}"'
++ _ASSERT_NULL_='eval assertNull --lineno "${LINENO:-}"'
++ _ASSERT_NOT_NULL_='eval assertNotNull --lineno "${LINENO:-}"'
++ _ASSERT_SAME_='eval assertSame --lineno "${LINENO:-}"'
++ _ASSERT_NOT_SAME_='eval assertNotSame --lineno "${LINENO:-}"'
++ _ASSERT_TRUE_='eval assertTrue --lineno "${LINENO:-}"'
++ _ASSERT_FALSE_='eval assertFalse --lineno "${LINENO:-}"'
++ _FAIL_='eval fail --lineno "${LINENO:-}"'
++ _FAIL_NOT_EQUALS_='eval failNotEquals --lineno "${LINENO:-}"'
++ _FAIL_FOUND_='eval failFound --lineno "${LINENO:-}"'
++ _FAIL_NOT_FOUND_='eval failNotFound --lineno "${LINENO:-}"'
++ _FAIL_SAME_='eval failSame --lineno "${LINENO:-}"'
++ _FAIL_NOT_SAME_='eval failNotSame --lineno "${LINENO:-}"'
++ builtin '[' 0 -eq 0 -o '' = -- ']'
++ __shunit_script=/home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
++ __shunit_mode=sourced
+++ _shunit_mktempDir
+++ exec mktemp -dqt shunit.XXXXXX
+++ return
++ __shunit_tmpDir=/tmp/shunit.5Fx659
++ SHUNIT_TMPDIR=/tmp/shunit.5Fx659/tmp
++ command mkdir /tmp/shunit.5Fx659/tmp
++ trap '_shunit_cleanup EXIT' 0
++ trap '_shunit_cleanup INT' 2
++ trap '_shunit_cleanup TERM' 15
++ _shunit_mktempFunc
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/oneTimeSetUp
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/oneTimeSetUp
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/oneTimeTearDown
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/oneTimeTearDown
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/setUp
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/setUp
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/tearDown
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/tearDown
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/suite
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/suite
++ for _shunit_func_ in oneTimeSetUp oneTimeTearDown setUp tearDown suite noexec
++ _shunit_file_=/tmp/shunit.5Fx659/noexec
++ command cat
++ command chmod +x /tmp/shunit.5Fx659/noexec
++ unset _shunit_file_
++ PATH='/tmp/shunit.5Fx659:/home/mobaxterm/.cursor-server/bin/02270c8441bdc4b2fdbc30e6f470a589ec78d600/bin/remote-cli:/home/mobaxterm/.nvm/versions/node/v22.15.0/bin:/home/mobaxterm/.local/bin:/home/mobaxterm/.pyenv/shims:/home/mobaxterm/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/v/Users/Austin/DOCUME~1/MobaXterm/slash/bin:/mnt/c/Windows/:/mnt/c/Windows/system32/:/mnt/c/Program Files (x86)/Razer Chroma SDK/bin:/mnt/c/Program Files/Razer Chroma SDK/bin:/mnt/c/Program Files (x86)/Razer/ChromaBroadcast/bin:/mnt/c/Program Files/Razer/ChromaBroadcast/bin:/mnt/c/Program Files/Eclipse Adoptium/jdk-19.0.2.7-hotspot/bin:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Go/bin:/mnt/s/Program Files (x86)/GnuPG/bin:/mnt/s/Users/Austin/AppData/Local/Programs/cursor/resources/app/bin:/mnt/c/Program Files/dotnet/:/mnt/s/Users/Austin/AppData/Local/Microsoft/WindowsApps:/mnt/s/Users/Austin/bin:/mnt/s/Users/Austin/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/s/Users/Austin/AppData/Local/Programs/cursor/resources/app/bin:/mnt/c/Windows/sysnative/:/snap/bin'
++ noexec
++ builtin '[' sourced = standalone ']'
++ _shunit_configureColor auto
++ _shunit_color_=1
++ case $1 in
+++ _shunit_colors
++++ tput colors
+++ _shunit_tput_=256
+++ echo 256
+++ unset _shunit_tput_
++ builtin '[' 256 -ge 8 ']'
++ _shunit_color_=0
++ case ${_shunit_color_} in
++ __shunit_ansi_none='\033[0m'
++ __shunit_ansi_red='\033[1;31m'
++ __shunit_ansi_green='\033[1;32m'
++ __shunit_ansi_yellow='\033[1;33m'
++ __shunit_ansi_cyan='\033[1;36m'
++ unset _shunit_color_ _shunit_tput_
+++ date +%s.%N
++ __shunit_startSuiteTime=1748242212.947525596
++ oneTimeSetUp
++ builtin '[' 0 -ge 2 ']'
++ suite
++ builtin '[' -z '' ']'
+++ _shunit_extractTestFunctions /home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
+++ _shunit_script_=/home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
+++ _shunit_regex_='^\s*((function test[A-Za-z0-9_-]*)|(test[A-Za-z0-9_-]* *\(\)))'
+++ grep -E '^\s*((function test[A-Za-z0-9_-]*)|(test[A-Za-z0-9_-]* *\(\)))' /home/mobaxterm/Documents/git/ai-rizz/tests/unit/test_conflict_resolution.test.sh
+++ command sed 's/^[^A-Za-z0-9_-]*//;s/^function //;s/\([A-Za-z0-9_-]*\).*/\1/g'
+++ xargs
+++ unset _shunit_regex_ _shunit_script_
++ shunit_funcs_='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking test_migrate_complex_ruleset_scenario test_migrate_sync_after_modification test_migrate_nonexistent_rule_graceful test_migrate_preserves_manifest_headers'
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_rule_local_to_commit
++ shunit_func_=test_migrate_rule_local_to_commit
++ __shunit_suite=test_migrate_rule_local_to_commit
+++ expr 0 + 1
++ __shunit_testsTotal=1
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_rule_commit_to_local
++ shunit_func_=test_migrate_rule_commit_to_local
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local'
+++ expr 1 + 1
++ __shunit_testsTotal=2
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_ruleset_with_all_rules
++ shunit_func_=test_migrate_ruleset_with_all_rules
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules'
+++ expr 2 + 1
++ __shunit_testsTotal=3
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_preserves_other_rules
++ shunit_func_=test_migrate_preserves_other_rules
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules'
+++ expr 3 + 1
++ __shunit_testsTotal=4
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_resolve_duplicate_entries_commit_wins
++ shunit_func_=test_resolve_duplicate_entries_commit_wins
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins'
+++ expr 4 + 1
++ __shunit_testsTotal=5
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_updates_git_tracking
++ shunit_func_=test_migrate_updates_git_tracking
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking'
+++ expr 5 + 1
++ __shunit_testsTotal=6
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_complex_ruleset_scenario
++ shunit_func_=test_migrate_complex_ruleset_scenario
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking test_migrate_complex_ruleset_scenario'
+++ expr 6 + 1
++ __shunit_testsTotal=7
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_sync_after_modification
++ shunit_func_=test_migrate_sync_after_modification
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking test_migrate_complex_ruleset_scenario test_migrate_sync_after_modification'
+++ expr 7 + 1
++ __shunit_testsTotal=8
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_nonexistent_rule_graceful
++ shunit_func_=test_migrate_nonexistent_rule_graceful
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking test_migrate_complex_ruleset_scenario test_migrate_sync_after_modification test_migrate_nonexistent_rule_graceful'
+++ expr 8 + 1
++ __shunit_testsTotal=9
++ unset shunit_func_
++ for shunit_func_ in ${shunit_funcs_}
++ suite_addTest test_migrate_preserves_manifest_headers
++ shunit_func_=test_migrate_preserves_manifest_headers
++ __shunit_suite='test_migrate_rule_local_to_commit test_migrate_rule_commit_to_local test_migrate_ruleset_with_all_rules test_migrate_preserves_other_rules test_resolve_duplicate_entries_commit_wins test_migrate_updates_git_tracking test_migrate_complex_ruleset_scenario test_migrate_sync_after_modification test_migrate_nonexistent_rule_graceful test_migrate_preserves_manifest_headers'
+++ expr 9 + 1
++ __shunit_testsTotal=10
++ unset shunit_func_
++ unset shunit_func_ shunit_funcs_
++ builtin '[' -z '' ']'
++ __shunit_suiteName=test_conflict_resolution.test.sh
+++ _shunit_escapeXmlData test_conflict_resolution.test.sh
+++ echo test_conflict_resolution.test.sh
+++ command sed 's/&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/"/\&quot;/g;s/'\''/\&apos;/g'
++ __shunit_xmlSuiteName=test_conflict_resolution.test.sh
++ _shunit_execSuite
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242212.971203690
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.uk5ojZr4db
++ cd /tmp/tmp.uk5ojZr4db
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.uk5ojZr4db/test_repo
++ mkdir -p /tmp/tmp.uk5ojZr4db/test_repo/rules
++ mkdir -p /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.uk5ojZr4db/test_repo/rules/rule2.mdc /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.uk5ojZr4db/test_repo/rules/rule2.mdc /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.uk5ojZr4db/test_repo/rules/rule3.mdc /tmp/tmp.uk5ojZr4db/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.uk5ojZr4db/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.uk5ojZr4db
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_rule_local_to_commit
test_migrate_rule_local_to_commit
++ eval test_migrate_rule_local_to_commit
+++ test_migrate_rule_local_to_commit
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uk5ojZr4db/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uk5ojZr4db/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.8ds0yand5I
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.8ds0yand5I
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/local/rule1.mdc
+++ assertTrue 'File should exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 0 + 1
+++ __shunit_assertsPassed=1
++++ expr 0 + 1
+++ __shunit_assertsTotal=1
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uk5ojZr4db/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule1.mdc
+++ '[' -n rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.JqP8aLRdxL
+++ echo rule1.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.JqP8aLRdxL
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.o3CmeMQRDg
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.uk5ojZr4db/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.o3CmeMQRDg
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_not_exists test_target/local/rule1.mdc
+++ assertFalse 'File should not exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule1.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 1 + 1
+++ __shunit_assertsPassed=2
++++ expr 1 + 1
+++ __shunit_assertsTotal=2
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 2 + 1
+++ __shunit_assertsPassed=3
++++ expr 2 + 1
+++ __shunit_assertsTotal=3
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
++++ cat ai-rizz.local.inf
+++ local_content='test_repo	test_target'
+++ echo 'test_repo	test_target'
+++ grep -q rule1.mdc
++++ cat ai-rizz.inf
+++ commit_content='test_repo	test_target
rules/rule1.mdc'
+++ echo 'test_repo	test_target
rules/rule1.mdc'
+++ grep -q rule1.mdc
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.uk5ojZr4db
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.072388829
+++ _shunit_calc_bc 1748242213.072388829 - 1748242212.971203690
++++ echo 1748242213.072388829 - 1748242212.971203690
++++ command busybox bc
+++ _shunit_output_=.101185139
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .101185139
+++ case "${1}" in
+++ _shunit_format_result_=.101185139
++++ echo .101185139
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.101185139
++++ echo 0.101185139
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.101185139
++++ echo 0.101185139
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.101185139
+++ echo 0.101185139
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.101185139
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 0 + 1
++ __shunit_testsPassed=1
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.081499146
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.AxvL7TV7jQ
++ cd /tmp/tmp.AxvL7TV7jQ
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.AxvL7TV7jQ/test_repo
++ mkdir -p /tmp/tmp.AxvL7TV7jQ/test_repo/rules
++ mkdir -p /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule2.mdc /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule2.mdc /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule3.mdc /tmp/tmp.AxvL7TV7jQ/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.AxvL7TV7jQ/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.AxvL7TV7jQ
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_rule_commit_to_local
test_migrate_rule_commit_to_local
++ eval test_migrate_rule_commit_to_local
+++ test_migrate_rule_commit_to_local
+++ cmd_init test_repo -d test_target --commit
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z commit ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.AxvL7TV7jQ/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: commit'
Initialized ai-rizz with source: test_repo, target: test_target, mode: commit
+++ return 0
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' true = true ']'
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.AxvL7TV7jQ/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/shared ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' false = false ']'
+++ return 0
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.qZpNzPzt5n
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.qZpNzPzt5n
+++ '[' false = true ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 3 + 1
+++ __shunit_assertsPassed=4
++++ expr 3 + 1
+++ __shunit_assertsTotal=4
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' true = true ']'
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode local
+++ target_mode=local
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ read_manifest_metadata ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.AxvL7TV7jQ/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' true = true ']'
++++ basename rules/rule1.mdc
+++ rule_filename=rule1.mdc
++++ read_manifest_entries ai-rizz.inf
+++ commit_entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ entry_path=/tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc
+++ '[' -d /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc ']'
+++ IFS=
+++ read -r entry
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.inf ']'
++++ read_manifest_metadata ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=
+++ '[' -n '' ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.VjCQ1B1WIW
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.AxvL7TV7jQ/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.VjCQ1B1WIW
+++ '[' true = false ']'
+++ return 0
+++ assert_file_not_exists test_target/shared/rule1.mdc
+++ assertFalse 'File should not exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/shared/rule1.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 4 + 1
+++ __shunit_assertsPassed=5
++++ expr 4 + 1
+++ __shunit_assertsTotal=5
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/local/rule1.mdc
+++ assertTrue 'File should exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 5 + 1
+++ __shunit_assertsPassed=6
++++ expr 5 + 1
+++ __shunit_assertsTotal=6
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.AxvL7TV7jQ
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.174717463
+++ _shunit_calc_bc 1748242213.174717463 - 1748242213.081499146
++++ echo 1748242213.174717463 - 1748242213.081499146
++++ command busybox bc
+++ _shunit_output_=.093218317
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .093218317
+++ case "${1}" in
+++ _shunit_format_result_=.093218317
++++ echo .093218317
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.093218317
++++ echo 0.093218317
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.093218317
++++ echo 0.093218317
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.093218317
+++ echo 0.093218317
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.093218317
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 1 + 1
++ __shunit_testsPassed=2
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.183867351
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.SkJ4qJGejw
++ cd /tmp/tmp.SkJ4qJGejw
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.SkJ4qJGejw/test_repo
++ mkdir -p /tmp/tmp.SkJ4qJGejw/test_repo/rules
++ mkdir -p /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.SkJ4qJGejw/test_repo/rules/rule1.mdc /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.SkJ4qJGejw/test_repo/rules/rule2.mdc /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.SkJ4qJGejw/test_repo/rules/rule2.mdc /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.SkJ4qJGejw/test_repo/rules/rule3.mdc /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.SkJ4qJGejw/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.SkJ4qJGejw
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_ruleset_with_all_rules
test_migrate_ruleset_with_all_rules
++ eval test_migrate_ruleset_with_all_rules
+++ test_migrate_ruleset_with_all_rules
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.SkJ4qJGejw/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_ruleset ruleset1 --local
+++ mode=
+++ rulesets=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rulesets=ruleset1
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.SkJ4qJGejw/test_repo ']'
+++ return 0
+++ for ruleset in $rulesets
+++ ruleset_path=rulesets/ruleset1
+++ '[' '!' -d /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rulesets/ruleset1
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rulesets/ruleset1
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rulesets/ruleset1$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rulesets/ruleset1
+++ echo 'Added ruleset: rulesets/ruleset1'
Added ruleset: rulesets/ruleset1
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rulesets/ruleset1
+++ '[' -n rulesets/ruleset1 ']'
++++ mktemp
+++ temp_file=/tmp/tmp.xOvffde7eT
+++ echo rulesets/ruleset1
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset1 ']'
+++ copy_entry_to_target rulesets/ruleset1 test_target/local
+++ entry=rulesets/ruleset1
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ '[' -d /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ find /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 -name '*.mdc' -type f -o -name '*.mdc' -type l
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule1.mdc ']'
+++ cp -L /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule1.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule2.mdc ']'
+++ cp -L /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule2.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.xOvffde7eT
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/local/rule1.mdc
+++ assertTrue 'File should exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 6 + 1
+++ __shunit_assertsPassed=7
++++ expr 6 + 1
+++ __shunit_assertsTotal=7
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/local/rule2.mdc
+++ assertTrue 'File should exist: test_target/local/rule2.mdc' '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 7 + 1
+++ __shunit_assertsPassed=8
++++ expr 7 + 1
+++ __shunit_assertsTotal=8
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ cmd_add_ruleset ruleset1 --commit
+++ mode=
+++ rulesets=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rulesets=ruleset1
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.SkJ4qJGejw/test_repo ']'
+++ return 0
+++ for ruleset in $rulesets
+++ ruleset_path=rulesets/ruleset1
+++ '[' '!' -d /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rulesets/ruleset1$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rulesets/ruleset1
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rulesets/ruleset1
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rulesets/ruleset1$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ add_manifest_entry_to_file ai-rizz.inf rulesets/ruleset1
+++ target_manifest_file=ai-rizz.inf
+++ entry=rulesets/ruleset1
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rulesets/ruleset1$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rulesets/ruleset1
+++ echo 'Added ruleset: rulesets/ruleset1'
Added ruleset: rulesets/ruleset1
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files='rule1.mdc
rule2.mdc'
+++ '[' -n 'rule1.mdc
rule2.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.T2BxY3hA0i
+++ echo 'rule1.mdc
rule2.mdc'
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ '[' -n rule2.mdc ']'
+++ remove_local_entries_deploying_file rule2.mdc
+++ filename=rule2.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.T2BxY3hA0i
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rulesets/ruleset1
+++ '[' -n rulesets/ruleset1 ']'
++++ mktemp
+++ temp_file=/tmp/tmp.ztZfD5mg0J
+++ echo rulesets/ruleset1
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset1 ']'
+++ copy_entry_to_target rulesets/ruleset1 test_target/shared
+++ entry=rulesets/ruleset1
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ '[' -d /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 ']'
+++ find /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1 -name '*.mdc' -type f -o -name '*.mdc' -type l
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule1.mdc ']'
+++ cp -L /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule2.mdc ']'
+++ cp -L /tmp/tmp.SkJ4qJGejw/test_repo/rulesets/ruleset1/rule2.mdc test_target/shared/
+++ IFS=
+++ read -r rule_file
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.ztZfD5mg0J
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_not_exists test_target/local/rule1.mdc
+++ assertFalse 'File should not exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule1.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 8 + 1
+++ __shunit_assertsPassed=9
++++ expr 8 + 1
+++ __shunit_assertsTotal=9
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_not_exists test_target/local/rule2.mdc
+++ assertFalse 'File should not exist: test_target/local/rule2.mdc' '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule2.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 9 + 1
+++ __shunit_assertsPassed=10
++++ expr 9 + 1
+++ __shunit_assertsTotal=10
++++ expr 3 + 1
+++ __shunit_assertsCurrentTest=4
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 10 + 1
+++ __shunit_assertsPassed=11
++++ expr 10 + 1
+++ __shunit_assertsTotal=11
++++ expr 4 + 1
+++ __shunit_assertsCurrentTest=5
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule2.mdc
+++ assertTrue 'File should exist: test_target/shared/rule2.mdc' '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 11 + 1
+++ __shunit_assertsPassed=12
++++ expr 11 + 1
+++ __shunit_assertsTotal=12
++++ expr 5 + 1
+++ __shunit_assertsCurrentTest=6
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.SkJ4qJGejw
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.301706984
+++ _shunit_calc_bc 1748242213.301706984 - 1748242213.183867351
++++ echo 1748242213.301706984 - 1748242213.183867351
++++ command busybox bc
+++ _shunit_output_=.117839633
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .117839633
+++ case "${1}" in
+++ _shunit_format_result_=.117839633
++++ echo .117839633
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.117839633
++++ echo 0.117839633
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.117839633
++++ echo 0.117839633
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.117839633
+++ echo 0.117839633
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.117839633
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 2 + 1
++ __shunit_testsPassed=3
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.311282176
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.TLGGiiSpci
++ cd /tmp/tmp.TLGGiiSpci
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.TLGGiiSpci/test_repo
++ mkdir -p /tmp/tmp.TLGGiiSpci/test_repo/rules
++ mkdir -p /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc /tmp/tmp.TLGGiiSpci/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.TLGGiiSpci/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.TLGGiiSpci
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_preserves_other_rules
test_migrate_preserves_other_rules
++ eval test_migrate_preserves_other_rules
+++ test_migrate_preserves_other_rules
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.TLGGiiSpci/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.TLGGiiSpci/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.k4z77PZbpU
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.k4z77PZbpU
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule2.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule2.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.TLGGiiSpci/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule2.mdc
+++ '[' '!' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule2.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule2.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ manifest_file=ai-rizz.local.inf
+++ grep -q '^rules/rule2.mdc$'
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ echo rules/rule2.mdc
+++ echo 'Added rule: rules/rule2.mdc'
Added rule: rules/rule2.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries='rules/rule1.mdc
rules/rule2.mdc'
+++ '[' -n 'rules/rule1.mdc
rules/rule2.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.Nw4ntMiRCJ
+++ echo 'rules/rule1.mdc
rules/rule2.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule2.mdc ']'
+++ copy_entry_to_target rules/rule2.mdc test_target/local
+++ entry=rules/rule2.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.Nw4ntMiRCJ
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule3.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule3.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.TLGGiiSpci/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule3.mdc
+++ '[' '!' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule3.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule3.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule3.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ echo rules/rule3.mdc
+++ echo 'Added rule: rules/rule3.mdc'
Added rule: rules/rule3.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries='rules/rule1.mdc
rules/rule2.mdc
rules/rule3.mdc'
+++ '[' -n 'rules/rule1.mdc
rules/rule2.mdc
rules/rule3.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.d0QMnoVIqE
+++ echo 'rules/rule1.mdc
rules/rule2.mdc
rules/rule3.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule2.mdc ']'
+++ copy_entry_to_target rules/rule2.mdc test_target/local
+++ entry=rules/rule2.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ copy_entry_to_target rules/rule3.mdc test_target/local
+++ entry=rules/rule3.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.d0QMnoVIqE
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule2.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule2.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.TLGGiiSpci/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule2.mdc
+++ '[' '!' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule2.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule2.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule2.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule2.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ grep -v '^$'
++++ tail -n +2 ai-rizz.local.inf
+++ entries='rules/rule1.mdc
rules/rule3.mdc'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n 'rules/rule1.mdc
rules/rule3.mdc' ']'
+++ echo 'rules/rule1.mdc
rules/rule3.mdc'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule2.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule2.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule2.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule2.mdc
+++ echo 'Added rule: rules/rule2.mdc'
Added rule: rules/rule2.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule2.mdc
+++ '[' -n rule2.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.2NB9aJTB3V
+++ echo rule2.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule2.mdc ']'
+++ remove_local_entries_deploying_file rule2.mdc
+++ filename=rule2.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries='rules/rule1.mdc
rules/rule3.mdc'
+++ '[' -n 'rules/rule1.mdc
rules/rule3.mdc' ']'
++++ mktemp
+++ temp_entries=/tmp/tmp.xW5lAQ0B6O
+++ echo 'rules/rule1.mdc
rules/rule3.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
++++ basename /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' rule1.mdc = rule2.mdc ']'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc ']'
++++ basename /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc
+++ '[' rule3.mdc = rule2.mdc ']'
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.xW5lAQ0B6O
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.2NB9aJTB3V
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule2.mdc
+++ '[' -n rules/rule2.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.9jInzxafHl
+++ echo rules/rule2.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule2.mdc ']'
+++ copy_entry_to_target rules/rule2.mdc test_target/shared
+++ entry=rules/rule2.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule2.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.9jInzxafHl
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries='rules/rule1.mdc
rules/rule3.mdc'
+++ '[' -n 'rules/rule1.mdc
rules/rule3.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.v77FToXjh9
+++ echo 'rules/rule1.mdc
rules/rule3.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ copy_entry_to_target rules/rule3.mdc test_target/local
+++ entry=rules/rule3.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc ']'
+++ cp /tmp/tmp.TLGGiiSpci/test_repo/rules/rule3.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.v77FToXjh9
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/local/rule1.mdc
+++ assertTrue 'File should exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 12 + 1
+++ __shunit_assertsPassed=13
++++ expr 12 + 1
+++ __shunit_assertsTotal=13
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_not_exists test_target/local/rule2.mdc
+++ assertFalse 'File should not exist: test_target/local/rule2.mdc' '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule2.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 13 + 1
+++ __shunit_assertsPassed=14
++++ expr 13 + 1
+++ __shunit_assertsTotal=14
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/local/rule3.mdc
+++ assertTrue 'File should exist: test_target/local/rule3.mdc' '[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule3.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule3.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule3.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule3.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 14 + 1
+++ __shunit_assertsPassed=15
++++ expr 14 + 1
+++ __shunit_assertsTotal=15
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule2.mdc
+++ assertTrue 'File should exist: test_target/shared/rule2.mdc' '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 15 + 1
+++ __shunit_assertsPassed=16
++++ expr 15 + 1
+++ __shunit_assertsTotal=16
++++ expr 3 + 1
+++ __shunit_assertsCurrentTest=4
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.TLGGiiSpci
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.455399063
+++ _shunit_calc_bc 1748242213.455399063 - 1748242213.311282176
++++ echo 1748242213.455399063 - 1748242213.311282176
++++ command busybox bc
+++ _shunit_output_=.144116887
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .144116887
+++ case "${1}" in
+++ _shunit_format_result_=.144116887
++++ echo .144116887
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.144116887
++++ echo 0.144116887
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.144116887
++++ echo 0.144116887
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.144116887
+++ echo 0.144116887
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.144116887
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 3 + 1
++ __shunit_testsPassed=4
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.466807887
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.ofLfdrOVcU
++ cd /tmp/tmp.ofLfdrOVcU
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.ofLfdrOVcU/test_repo
++ mkdir -p /tmp/tmp.ofLfdrOVcU/test_repo/rules
++ mkdir -p /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule2.mdc /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule2.mdc /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule3.mdc /tmp/tmp.ofLfdrOVcU/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.ofLfdrOVcU/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.ofLfdrOVcU
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_resolve_duplicate_entries_commit_wins
test_resolve_duplicate_entries_commit_wins
++ eval test_resolve_duplicate_entries_commit_wins
+++ test_resolve_duplicate_entries_commit_wins
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ofLfdrOVcU/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ofLfdrOVcU/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.ynprZ0rK5q
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.ynprZ0rK5q
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ofLfdrOVcU/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule1.mdc
+++ '[' -n rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.mB9l1rH2SS
+++ echo rule1.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.mB9l1rH2SS
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.ybLX5vrQap
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.ybLX5vrQap
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ echo rules/rule1.mdc
+++ cmd_sync
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' true = true ']'
+++ '[' true = true ']'
+++ '[' test_repo '!=' test_repo ']'
+++ source_repo=
+++ '[' -n test_repo ']'
+++ source_repo=test_repo
+++ '[' -n test_repo ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ofLfdrOVcU/test_repo ']'
+++ return 0
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule1.mdc
+++ '[' -n rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.tLgVTIaMN3
+++ echo rule1.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_entries=/tmp/tmp.qJraw56Yki
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ source_path=/tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
++++ basename /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc
+++ '[' rule1.mdc = rule1.mdc ']'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.qJraw56Yki
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.tLgVTIaMN3
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.9Nh6FqvJEn
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ofLfdrOVcU/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.9Nh6FqvJEn
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ echo 'Sync complete'
Sync complete
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 16 + 1
+++ __shunit_assertsPassed=17
++++ expr 16 + 1
+++ __shunit_assertsTotal=17
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_not_exists test_target/local/rule1.mdc
+++ assertFalse 'File should not exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule1.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 17 + 1
+++ __shunit_assertsPassed=18
++++ expr 17 + 1
+++ __shunit_assertsTotal=18
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
++++ cat ai-rizz.local.inf
+++ local_content='test_repo	test_target'
+++ echo 'test_repo	test_target'
+++ grep -q rule1.mdc
++ _shunit_error 'test_resolve_duplicate_entries_commit_wins() returned non-zero return code.'
++ echo -e '\033[1;31mshunit2:ERROR\033[0m test_resolve_duplicate_entries_commit_wins() returned non-zero return code.'
[1;31mshunit2:ERROR[0m test_resolve_duplicate_entries_commit_wins() returned non-zero return code.
++ __shunit_testSuccess=2
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.ofLfdrOVcU
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.592847122
+++ _shunit_calc_bc 1748242213.592847122 - 1748242213.466807887
++++ echo 1748242213.592847122 - 1748242213.466807887
++++ command busybox bc
+++ _shunit_output_=.126039235
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .126039235
+++ case "${1}" in
+++ _shunit_format_result_=.126039235
++++ echo .126039235
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.126039235
++++ echo 0.126039235
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.126039235
++++ echo 0.126039235
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.126039235
+++ echo 0.126039235
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.126039235
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>'
++ builtin '[' 2 -eq 0 ']'
+++ expr 0 + 1
++ __shunit_testsFailed=1
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.604236426
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.4d6IOJKIg7
++ cd /tmp/tmp.4d6IOJKIg7
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.4d6IOJKIg7/test_repo
++ mkdir -p /tmp/tmp.4d6IOJKIg7/test_repo/rules
++ mkdir -p /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule2.mdc /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule2.mdc /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule3.mdc /tmp/tmp.4d6IOJKIg7/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.4d6IOJKIg7/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.4d6IOJKIg7
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_updates_git_tracking
test_migrate_updates_git_tracking
++ eval test_migrate_updates_git_tracking
+++ test_migrate_updates_git_tracking
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.4d6IOJKIg7/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.4d6IOJKIg7/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.Alnb6Wpg93
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.Alnb6Wpg93
+++ '[' true = false ']'
+++ return 0
+++ git add .git/info/exclude
+++ git commit -m 'Initial local setup'
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.4d6IOJKIg7/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule1.mdc
+++ '[' -n rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.cLf5aKvBad
+++ echo rule1.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.cLf5aKvBad
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.tFF28nNpCq
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.4d6IOJKIg7/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.tFF28nNpCq
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 18 + 1
+++ __shunit_assertsPassed=19
++++ expr 18 + 1
+++ __shunit_assertsTotal=19
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ git check-ignore test_target/shared/rule1.mdc
+++ fail 'File should not be git-ignored after migration'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not be git-ignored after migration' = --lineno ']'
+++ builtin '[' 1 -gt 1 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 1 -eq 1 ']'
+++ shunit_message_='File should not be git-ignored after migration'
+++ shift
+++ _shunit_assertFail 'File should not be git-ignored after migration'
+++ __shunit_testSuccess=1
+++ _shunit_incFailedCount
++++ expr 0 + 1
+++ __shunit_assertsFailed=1
++++ expr 19 + 1
+++ __shunit_assertsTotal=20
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
++++ _shunit_escapeXmlData 'File should not be git-ignored after migration'
++++ echo 'File should not be git-ignored after migration'
++++ command sed 's/&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/"/\&quot;/g;s/'\''/\&apos;/g'
+++ _shunit_xml_message_='File should not be git-ignored after migration'
+++ __shunit_junitXmlCurrentTestCaseErrors='
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />'
+++ builtin '[' 1 -gt 0 ']'
+++ echo -e '\033[1;31mASSERT:\033[0mFile should not be git-ignored after migration'
[1;31mASSERT:[0mFile should not be git-ignored after migration
+++ unset _shunit_xml_message_
+++ unset shunit_message_
+++ return 1
++ _shunit_error 'test_migrate_updates_git_tracking() returned non-zero return code.'
++ echo -e '\033[1;31mshunit2:ERROR\033[0m test_migrate_updates_git_tracking() returned non-zero return code.'
[1;31mshunit2:ERROR[0m test_migrate_updates_git_tracking() returned non-zero return code.
++ __shunit_testSuccess=2
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.4d6IOJKIg7
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.694744262
+++ _shunit_calc_bc 1748242213.694744262 - 1748242213.604236426
++++ echo 1748242213.694744262 - 1748242213.604236426
++++ command busybox bc
+++ _shunit_output_=.090507836
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .090507836
+++ case "${1}" in
+++ _shunit_format_result_=.090507836
++++ echo .090507836
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.090507836
++++ echo 0.090507836
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.090507836
++++ echo 0.090507836
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.090507836
+++ echo 0.090507836
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.090507836
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_updates_git_tracking"
    time="0.090507836"
    assertions="2"
  >
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />
  </testcase>'
++ builtin '[' 2 -eq 0 ']'
+++ expr 1 + 1
++ __shunit_testsFailed=2
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.704576421
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.uudc6uA5Te
++ cd /tmp/tmp.uudc6uA5Te
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.uudc6uA5Te/test_repo
++ mkdir -p /tmp/tmp.uudc6uA5Te/test_repo/rules
++ mkdir -p /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.uudc6uA5Te/test_repo/rules/rule1.mdc /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.uudc6uA5Te/test_repo/rules/rule2.mdc /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.uudc6uA5Te/test_repo/rules/rule2.mdc /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.uudc6uA5Te/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.uudc6uA5Te
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_complex_ruleset_scenario
test_migrate_complex_ruleset_scenario
++ eval test_migrate_complex_ruleset_scenario
+++ test_migrate_complex_ruleset_scenario
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_ruleset ruleset1 --local
+++ mode=
+++ rulesets=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rulesets=ruleset1
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo ']'
+++ return 0
+++ for ruleset in $rulesets
+++ ruleset_path=rulesets/ruleset1
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rulesets/ruleset1
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rulesets/ruleset1
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rulesets/ruleset1$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rulesets/ruleset1
+++ echo 'Added ruleset: rulesets/ruleset1'
Added ruleset: rulesets/ruleset1
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rulesets/ruleset1
+++ '[' -n rulesets/ruleset1 ']'
++++ mktemp
+++ temp_file=/tmp/tmp.Dn0X5hOOG3
+++ echo rulesets/ruleset1
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset1 ']'
+++ copy_entry_to_target rulesets/ruleset1 test_target/local
+++ entry=rulesets/ruleset1
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ '[' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ find /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 -name '*.mdc' -type f -o -name '*.mdc' -type l
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule1.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule1.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule2.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule2.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.Dn0X5hOOG3
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule3.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule3.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule3.mdc
+++ '[' '!' -f /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule3.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule3.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule3.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ echo rules/rule3.mdc
+++ echo 'Added rule: rules/rule3.mdc'
Added rule: rules/rule3.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries='rulesets/ruleset1
rules/rule3.mdc'
+++ '[' -n 'rulesets/ruleset1
rules/rule3.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.9RFCuRU3Nr
+++ echo 'rulesets/ruleset1
rules/rule3.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset1 ']'
+++ copy_entry_to_target rulesets/ruleset1 test_target/local
+++ entry=rulesets/ruleset1
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ '[' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ find /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 -name '*.mdc' -type f -o -name '*.mdc' -type l
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule1.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule1.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule2.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1/rule2.mdc test_target/local/
+++ IFS=
+++ read -r rule_file
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ copy_entry_to_target rules/rule3.mdc test_target/local
+++ entry=rules/rule3.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc ']'
+++ cp /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.9RFCuRU3Nr
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_ruleset ruleset2 --commit
+++ mode=
+++ rulesets=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rulesets=ruleset2
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo ']'
+++ return 0
+++ for ruleset in $rulesets
+++ ruleset_path=rulesets/ruleset2
+++ '[' '!' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2 ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rulesets/ruleset2$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ add_manifest_entry_to_file ai-rizz.inf rulesets/ruleset2
+++ target_manifest_file=ai-rizz.inf
+++ entry=rulesets/ruleset2
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rulesets/ruleset2$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rulesets/ruleset2
+++ echo 'Added ruleset: rulesets/ruleset2'
Added ruleset: rulesets/ruleset2
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files='rule2.mdc
rule3.mdc'
+++ '[' -n 'rule2.mdc
rule3.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.Tcjwm8htmB
+++ echo 'rule2.mdc
rule3.mdc'
+++ IFS=
+++ read -r filename
+++ '[' -n rule2.mdc ']'
+++ remove_local_entries_deploying_file rule2.mdc
+++ filename=rule2.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries='rulesets/ruleset1
rules/rule3.mdc'
+++ '[' -n 'rulesets/ruleset1
rules/rule3.mdc' ']'
++++ mktemp
+++ temp_entries=/tmp/tmp.o2g1CSQXHq
+++ echo 'rulesets/ruleset1
rules/rule3.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset1 ']'
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ '[' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 ']'
+++ find /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset1 -name rule2.mdc -type f -o -name rule2.mdc -type l
+++ grep -q .
+++ rule_path=rules/rule2.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule2.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rulesets/ruleset1
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rulesets/ruleset1
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rulesets/ruleset1$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule3.mdc
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n rules/rule3.mdc ']'
+++ echo rules/rule3.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc ']'
++++ basename /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc
+++ '[' rule3.mdc = rule2.mdc ']'
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.o2g1CSQXHq
+++ IFS=
+++ read -r filename
+++ '[' -n rule3.mdc ']'
+++ remove_local_entries_deploying_file rule3.mdc
+++ filename=rule3.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=rules/rule3.mdc
+++ '[' -n rules/rule3.mdc ']'
++++ mktemp
+++ temp_entries=/tmp/tmp.6OLv1GpV6e
+++ echo rules/rule3.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule3.mdc ']'
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc ']'
++++ basename /tmp/tmp.uudc6uA5Te/test_repo/rules/rule3.mdc
+++ '[' rule3.mdc = rule3.mdc ']'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule3.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule3.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule3.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.6OLv1GpV6e
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.Tcjwm8htmB
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rulesets/ruleset2
+++ '[' -n rulesets/ruleset2 ']'
++++ mktemp
+++ temp_file=/tmp/tmp.08ROcqOUJy
+++ echo rulesets/ruleset2
+++ IFS=
+++ read -r entry
+++ '[' -n rulesets/ruleset2 ']'
+++ copy_entry_to_target rulesets/ruleset2 test_target/shared
+++ entry=rulesets/ruleset2
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2 ']'
+++ '[' -d /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2 ']'
+++ find /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2 -name '*.mdc' -type f -o -name '*.mdc' -type l
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule2.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule2.mdc test_target/shared/
+++ IFS=
+++ read -r rule_file
+++ '[' -f /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule3.mdc ']'
+++ cp -L /tmp/tmp.uudc6uA5Te/test_repo/rulesets/ruleset2/rule3.mdc test_target/shared/
+++ IFS=
+++ read -r rule_file
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.08ROcqOUJy
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_not_exists test_target/local/rule2.mdc
+++ assertFalse 'File should not exist: test_target/local/rule2.mdc' '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule2.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule2.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 19 + 1
+++ __shunit_assertsPassed=20
++++ expr 20 + 1
+++ __shunit_assertsTotal=21
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_not_exists test_target/local/rule3.mdc
+++ assertFalse 'File should not exist: test_target/local/rule3.mdc' '[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule3.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule3.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule3.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule3.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule3.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule3.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 20 + 1
+++ __shunit_assertsPassed=21
++++ expr 21 + 1
+++ __shunit_assertsTotal=22
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule2.mdc
+++ assertTrue 'File should exist: test_target/shared/rule2.mdc' '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 21 + 1
+++ __shunit_assertsPassed=22
++++ expr 22 + 1
+++ __shunit_assertsTotal=23
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule3.mdc
+++ assertTrue 'File should exist: test_target/shared/rule3.mdc' '[ -f '\''test_target/shared/rule3.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule3.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule3.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule3.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule3.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule3.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule3.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule3.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 22 + 1
+++ __shunit_assertsPassed=23
++++ expr 23 + 1
+++ __shunit_assertsTotal=24
++++ expr 3 + 1
+++ __shunit_assertsCurrentTest=4
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/local/rule1.mdc
+++ assertTrue 'File should exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=1
+++ builtin '[' 1 -eq 0 ']'
+++ _shunit_assertFail 'File should exist: test_target/local/rule1.mdc'
+++ __shunit_testSuccess=1
+++ _shunit_incFailedCount
++++ expr 1 + 1
+++ __shunit_assertsFailed=2
++++ expr 24 + 1
+++ __shunit_assertsTotal=25
++++ expr 4 + 1
+++ __shunit_assertsCurrentTest=5
++++ _shunit_escapeXmlData 'File should exist: test_target/local/rule1.mdc'
++++ echo 'File should exist: test_target/local/rule1.mdc'
++++ command sed 's/&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/"/\&quot;/g;s/'\''/\&apos;/g'
+++ _shunit_xml_message_='File should exist: test_target/local/rule1.mdc'
+++ __shunit_junitXmlCurrentTestCaseErrors='
    <failure
      type="shunit.assertFail"
      message="File should exist: test_target/local/rule1.mdc"
    />'
+++ builtin '[' 1 -gt 0 ']'
+++ echo -e '\033[1;31mASSERT:\033[0mFile should exist: test_target/local/rule1.mdc'
[1;31mASSERT:[0mFile should exist: test_target/local/rule1.mdc
+++ unset _shunit_xml_message_
+++ unset shunit_message_ shunit_condition_
+++ return 1
++ _shunit_error 'test_migrate_complex_ruleset_scenario() returned non-zero return code.'
++ echo -e '\033[1;31mshunit2:ERROR\033[0m test_migrate_complex_ruleset_scenario() returned non-zero return code.'
[1;31mshunit2:ERROR[0m test_migrate_complex_ruleset_scenario() returned non-zero return code.
++ __shunit_testSuccess=2
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.uudc6uA5Te
+++ date +%s.%N
++ __shunit_endCaseTime=1748242213.854423634
+++ _shunit_calc_bc 1748242213.854423634 - 1748242213.704576421
++++ echo 1748242213.854423634 - 1748242213.704576421
++++ command busybox bc
+++ _shunit_output_=.149847213
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .149847213
+++ case "${1}" in
+++ _shunit_format_result_=.149847213
++++ echo .149847213
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.149847213
++++ echo 0.149847213
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.149847213
++++ echo 0.149847213
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.149847213
+++ echo 0.149847213
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.149847213
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_updates_git_tracking"
    time="0.090507836"
    assertions="2"
  >
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_complex_ruleset_scenario"
    time="0.149847213"
    assertions="5"
  >
    <failure
      type="shunit.assertFail"
      message="File should exist: test_target/local/rule1.mdc"
    />
  </testcase>'
++ builtin '[' 2 -eq 0 ']'
+++ expr 2 + 1
++ __shunit_testsFailed=3
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242213.865130508
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.ZHjqcRAhuP
++ cd /tmp/tmp.ZHjqcRAhuP
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.ZHjqcRAhuP/test_repo
++ mkdir -p /tmp/tmp.ZHjqcRAhuP/test_repo/rules
++ mkdir -p /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule3.mdc /tmp/tmp.ZHjqcRAhuP/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.ZHjqcRAhuP/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.ZHjqcRAhuP
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_sync_after_modification
test_migrate_sync_after_modification
++ eval test_migrate_sync_after_modification
+++ test_migrate_sync_after_modification
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ZHjqcRAhuP/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=test_target/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ZHjqcRAhuP/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w test_target/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.iRxaP6ub4a
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.iRxaP6ub4a
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule2.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule2.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
++++ return 0
+++ metadata='test_repo	test_target'
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ case "$target_mode" in
+++ mkdir -p test_target/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo test_target
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=test_target
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ZHjqcRAhuP/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule2.mdc
+++ '[' '!' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule2.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ '[' '!' -w test_target/shared ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule2.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule2.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ manifest_file=ai-rizz.inf
+++ grep -q '^rules/rule2.mdc$'
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule2.mdc
+++ echo 'Added rule: rules/rule2.mdc'
Added rule: rules/rule2.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule2.mdc
+++ '[' -n rule2.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.AI3LU5rJc3
+++ echo rule2.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule2.mdc ']'
+++ remove_local_entries_deploying_file rule2.mdc
+++ filename=rule2.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_entries=/tmp/tmp.2UqbP1iWAZ
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
++++ basename /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc
+++ '[' rule1.mdc = rule2.mdc ']'
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.2UqbP1iWAZ
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.AI3LU5rJc3
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule2.mdc
+++ '[' -n rules/rule2.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.nq8T5mJB0A
+++ echo rules/rule2.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule2.mdc ']'
+++ copy_entry_to_target rules/rule2.mdc test_target/shared
+++ entry=rules/rule2.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc ']'
+++ cp /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.nq8T5mJB0A
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.ExxEm0zjEp
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/local
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/local
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc test_target/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.ExxEm0zjEp
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' true = true ']'
+++ '[' true = true ']'
+++ '[' test_repo '!=' test_repo ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=test_target/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.ZHjqcRAhuP/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	test_target'
++++ grep -q '	'
++++ echo 'test_repo	test_target'
+++ metadata='test_repo	test_target'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	test_target'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	test_target'
++++ cut -f2
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ '[' -n '' ']'
+++ '[' '!' -w test_target ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files='rule2.mdc
rule1.mdc'
+++ '[' -n 'rule2.mdc
rule1.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.LVa0Rl9Pon
+++ echo 'rule2.mdc
rule1.mdc'
+++ IFS=
+++ read -r filename
+++ '[' -n rule2.mdc ']'
+++ remove_local_entries_deploying_file rule2.mdc
+++ filename=rule2.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.LVa0Rl9Pon
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf test_target/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=test_target/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p test_target/shared
+++ case "$target_directory" in
+++ find test_target/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries='rules/rule2.mdc
rules/rule1.mdc'
+++ '[' -n 'rules/rule2.mdc
rules/rule1.mdc' ']'
++++ mktemp
+++ temp_file=/tmp/tmp.I9yCbErfGS
+++ echo 'rules/rule2.mdc
rules/rule1.mdc'
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule2.mdc ']'
+++ copy_entry_to_target rules/rule2.mdc test_target/shared
+++ entry=rules/rule2.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc ']'
+++ cp /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule2.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc test_target/shared
+++ entry=rules/rule1.mdc
+++ target_directory=test_target/shared
+++ source_path=/tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.ZHjqcRAhuP/test_repo/rules/rule1.mdc test_target/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.I9yCbErfGS
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=test_target/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p test_target/local
+++ case "$target_directory" in
+++ find test_target/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
+++ assert_file_exists test_target/shared/rule1.mdc
+++ assertTrue 'File should exist: test_target/shared/rule1.mdc' '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 23 + 1
+++ __shunit_assertsPassed=24
++++ expr 25 + 1
+++ __shunit_assertsTotal=26
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_exists test_target/shared/rule2.mdc
+++ assertTrue 'File should exist: test_target/shared/rule2.mdc' '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: test_target/shared/rule2.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: test_target/shared/rule2.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/shared/rule2.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/shared/rule2.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ eval '[ -f '\''test_target/shared/rule2.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 24 + 1
+++ __shunit_assertsPassed=25
++++ expr 26 + 1
+++ __shunit_assertsTotal=27
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assert_file_not_exists test_target/local/rule1.mdc
+++ assertFalse 'File should not exist: test_target/local/rule1.mdc' '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should not exist: test_target/local/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should not exist: test_target/local/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''test_target/local/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''test_target/local/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''test_target/local/rule1.mdc'\'' ]'
+++ eval '[' -f ''\''test_target/local/rule1.mdc'\''' ']'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 25 + 1
+++ __shunit_assertsPassed=26
++++ expr 27 + 1
+++ __shunit_assertsTotal=28
++++ expr 2 + 1
+++ __shunit_assertsCurrentTest=3
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.ZHjqcRAhuP
+++ date +%s.%N
++ __shunit_endCaseTime=1748242214.003337338
+++ _shunit_calc_bc 1748242214.003337338 - 1748242213.865130508
++++ echo 1748242214.003337338 - 1748242213.865130508
++++ command busybox bc
+++ _shunit_output_=.138206830
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .138206830
+++ case "${1}" in
+++ _shunit_format_result_=.138206830
++++ echo .138206830
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.138206830
++++ echo 0.138206830
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.13820683
++++ echo 0.13820683
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.13820683
+++ echo 0.13820683
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.13820683
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_updates_git_tracking"
    time="0.090507836"
    assertions="2"
  >
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_complex_ruleset_scenario"
    time="0.149847213"
    assertions="5"
  >
    <failure
      type="shunit.assertFail"
      message="File should exist: test_target/local/rule1.mdc"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_sync_after_modification"
    time="0.13820683"
    assertions="3"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 4 + 1
++ __shunit_testsPassed=5
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242214.013479392
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.Hzi44uYQLz
++ cd /tmp/tmp.Hzi44uYQLz
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.Hzi44uYQLz/test_repo
++ mkdir -p /tmp/tmp.Hzi44uYQLz/test_repo/rules
++ mkdir -p /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.Hzi44uYQLz/test_repo/rules/rule1.mdc /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.Hzi44uYQLz/test_repo/rules/rule2.mdc /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.Hzi44uYQLz/test_repo/rules/rule2.mdc /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.Hzi44uYQLz/test_repo/rules/rule3.mdc /tmp/tmp.Hzi44uYQLz/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.Hzi44uYQLz/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.Hzi44uYQLz
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_nonexistent_rule_graceful
test_migrate_nonexistent_rule_graceful
++ eval test_migrate_nonexistent_rule_graceful
+++ test_migrate_nonexistent_rule_graceful
+++ cmd_init test_repo -d test_target --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=test_target
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z test_target ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.Hzi44uYQLz/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p test_target/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo test_target
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=test_target
+++ echo 'test_repo	test_target'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes test_target
+++ target_dir=test_target
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude test_target/local add
+++ path=test_target/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^test_target/local$' .git/info/exclude
+++ echo test_target/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=test_target
+++ echo 'Initialized ai-rizz with source: test_repo, target: test_target, mode: local'
Initialized ai-rizz with source: test_repo, target: test_target, mode: local
+++ return 0
++++ cmd_add_rule nonexistent.mdc --commit
+++ output='++++ mode=
++++ rules=
++++ '\''['\'' 2 -gt 0 '\'']'\''
++++ case "$1" in
++++ '\''['\'' -z '\'''\'' '\'']'\''
++++ rules=nonexistent.mdc
++++ shift
++++ '\''['\'' 1 -gt 0 '\'']'\''
++++ case "$1" in
++++ mode=commit
++++ shift
++++ '\''['\'' 0 -gt 0 '\'']'\''
++++ '\''['\'' false = false '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ validate_manifest_integrity
++++ '\''['\'' false = true '\'']'\''
++++ '\''['\'' -z commit '\'']'\''
++++ lazy_init_occurred=false
++++ needs_lazy_init commit
++++ target_mode=commit
++++ case "$target_mode" in
++++ '\''['\'' false = false '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ lazy_init_mode commit
++++ target_mode=commit
+++++ get_any_manifest_metadata
+++++ '\''['\'' -f ai-rizz.inf '\'']'\''
+++++ '\''['\'' -f ai-rizz.local.inf '\'']'\''
+++++ read_manifest_metadata ai-rizz.local.inf
+++++ manifest_file=ai-rizz.local.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ read -r first_line
+++++ echo '\''test_repo	test_target'\''
+++++ grep -q '\''	'\''
+++++ echo '\''test_repo	test_target'\''
+++++ return 0
++++ metadata='\''test_repo	test_target'\''
+++++ echo '\''test_repo	test_target'\''
+++++ cut -f1
++++ source_repo=test_repo
+++++ echo '\''test_repo	test_target'\''
+++++ cut -f2
++++ target_dir=test_target
++++ case "$target_mode" in
++++ mkdir -p test_target/shared
++++ echo '\'''\''
++++ write_manifest_with_entries ai-rizz.inf test_repo test_target
++++ manifest_file=ai-rizz.inf
++++ source_repo=test_repo
++++ target_dir=test_target
++++ echo '\''test_repo	test_target'\''
++++ IFS=
++++ read -r line
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ IFS=
++++ read -r line
++++ HAS_COMMIT_MODE=true
++++ COMMIT_SOURCE_REPO=test_repo
++++ COMMIT_TARGET_DIR=test_target
++++ lazy_init_occurred=true
++++ case "$mode" in
++++ manifest_file=ai-rizz.inf
++++ target_dir=test_target/shared
++++ git_sync test_repo
++++ repo_url=test_repo
++++ case "$repo_url" in
++++ '\''['\'' '\''!'\'' -d /tmp/tmp.Hzi44uYQLz/test_repo '\'']'\''
++++ return 0
++++ for rule in $rules
++++ case "$rule" in
++++ rule_path=rules/nonexistent.mdc
++++ '\''['\'' '\''!'\'' -f /tmp/tmp.Hzi44uYQLz/test_repo/rules/nonexistent.mdc '\'']'\''
++++ warn '\''Rule not found: rules/nonexistent.mdc'\''
++++ echo '\''Warning: Rule not found: rules/nonexistent.mdc'\''
Warning: Rule not found: rules/nonexistent.mdc
++++ continue
++++ sync_all_modes
++++ sync_success=true
++++ resolve_conflicts
++++ '\''['\'' true = false '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ get_files_from_manifest ai-rizz.inf
++++ commit_files=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ sync_manifest_to_directory ai-rizz.inf test_target/shared
++++ manifest_file=ai-rizz.inf
++++ target_directory=test_target/shared
++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
++++ mkdir -p test_target/shared
++++ case "$target_directory" in
++++ find test_target/shared -maxdepth 1 -name '\''*.mdc'\'' -type f -delete
+++++ read_manifest_entries ai-rizz.inf
+++++ manifest_file=ai-rizz.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
+++++ tail -n +2 ai-rizz.inf
+++++ grep -v '\''^$'\''
+++++ true
++++ entries=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
++++ manifest_file=ai-rizz.local.inf
++++ target_directory=test_target/local
++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
++++ mkdir -p test_target/local
++++ case "$target_directory" in
++++ find test_target/local -maxdepth 1 -name '\''*.mdc'\'' -type f -delete
+++++ read_manifest_entries ai-rizz.local.inf
+++++ manifest_file=ai-rizz.local.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ tail -n +2 ai-rizz.local.inf
+++++ grep -v '\''^$'\''
+++++ true
++++ entries=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ return 0'
+++ echo '++++ mode=
++++ rules=
++++ '\''['\'' 2 -gt 0 '\'']'\''
++++ case "$1" in
++++ '\''['\'' -z '\'''\'' '\'']'\''
++++ rules=nonexistent.mdc
++++ shift
++++ '\''['\'' 1 -gt 0 '\'']'\''
++++ case "$1" in
++++ mode=commit
++++ shift
++++ '\''['\'' 0 -gt 0 '\'']'\''
++++ '\''['\'' false = false '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ validate_manifest_integrity
++++ '\''['\'' false = true '\'']'\''
++++ '\''['\'' -z commit '\'']'\''
++++ lazy_init_occurred=false
++++ needs_lazy_init commit
++++ target_mode=commit
++++ case "$target_mode" in
++++ '\''['\'' false = false '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ lazy_init_mode commit
++++ target_mode=commit
+++++ get_any_manifest_metadata
+++++ '\''['\'' -f ai-rizz.inf '\'']'\''
+++++ '\''['\'' -f ai-rizz.local.inf '\'']'\''
+++++ read_manifest_metadata ai-rizz.local.inf
+++++ manifest_file=ai-rizz.local.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ read -r first_line
+++++ echo '\''test_repo	test_target'\''
+++++ grep -q '\''	'\''
+++++ echo '\''test_repo	test_target'\''
+++++ return 0
++++ metadata='\''test_repo	test_target'\''
+++++ echo '\''test_repo	test_target'\''
+++++ cut -f1
++++ source_repo=test_repo
+++++ echo '\''test_repo	test_target'\''
+++++ cut -f2
++++ target_dir=test_target
++++ case "$target_mode" in
++++ mkdir -p test_target/shared
++++ echo '\'''\''
++++ write_manifest_with_entries ai-rizz.inf test_repo test_target
++++ manifest_file=ai-rizz.inf
++++ source_repo=test_repo
++++ target_dir=test_target
++++ echo '\''test_repo	test_target'\''
++++ IFS=
++++ read -r line
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ IFS=
++++ read -r line
++++ HAS_COMMIT_MODE=true
++++ COMMIT_SOURCE_REPO=test_repo
++++ COMMIT_TARGET_DIR=test_target
++++ lazy_init_occurred=true
++++ case "$mode" in
++++ manifest_file=ai-rizz.inf
++++ target_dir=test_target/shared
++++ git_sync test_repo
++++ repo_url=test_repo
++++ case "$repo_url" in
++++ '\''['\'' '\''!'\'' -d /tmp/tmp.Hzi44uYQLz/test_repo '\'']'\''
++++ return 0
++++ for rule in $rules
++++ case "$rule" in
++++ rule_path=rules/nonexistent.mdc
++++ '\''['\'' '\''!'\'' -f /tmp/tmp.Hzi44uYQLz/test_repo/rules/nonexistent.mdc '\'']'\''
++++ warn '\''Rule not found: rules/nonexistent.mdc'\''
++++ echo '\''Warning: Rule not found: rules/nonexistent.mdc'\''
Warning: Rule not found: rules/nonexistent.mdc
++++ continue
++++ sync_all_modes
++++ sync_success=true
++++ resolve_conflicts
++++ '\''['\'' true = false '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ get_files_from_manifest ai-rizz.inf
++++ commit_files=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ sync_manifest_to_directory ai-rizz.inf test_target/shared
++++ manifest_file=ai-rizz.inf
++++ target_directory=test_target/shared
++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
++++ mkdir -p test_target/shared
++++ case "$target_directory" in
++++ find test_target/shared -maxdepth 1 -name '\''*.mdc'\'' -type f -delete
+++++ read_manifest_entries ai-rizz.inf
+++++ manifest_file=ai-rizz.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.inf '\'']'\''
+++++ tail -n +2 ai-rizz.inf
+++++ grep -v '\''^$'\''
+++++ true
++++ entries=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = true '\'']'\''
++++ sync_manifest_to_directory ai-rizz.local.inf test_target/local
++++ manifest_file=ai-rizz.local.inf
++++ target_directory=test_target/local
++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
++++ mkdir -p test_target/local
+++ grep -q 'not found\|warning'
++++ case "$target_directory" in
++++ find test_target/local -maxdepth 1 -name '\''*.mdc'\'' -type f -delete
+++++ read_manifest_entries ai-rizz.local.inf
+++++ manifest_file=ai-rizz.local.inf
+++++ '\''['\'' '\''!'\'' -f ai-rizz.local.inf '\'']'\''
+++++ tail -n +2 ai-rizz.local.inf
+++++ grep -v '\''^$'\''
+++++ true
++++ entries=
++++ '\''['\'' -n '\'''\'' '\'']'\''
++++ '\''['\'' true = false '\'']'\''
++++ return 0'
+++ assert_commit_mode_exists
+++ assertTrue 'Commit manifest should exist' '[ -f '\''ai-rizz.inf'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'Commit manifest should exist' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='Commit manifest should exist'
+++ shift
+++ shunit_condition_='[ -f '\''ai-rizz.inf'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''ai-rizz.inf'\'' ]' ']'
+++ expr '(' '[ -f '\''ai-rizz.inf'\'' ]' + 0 ')' = '[ -f '\''ai-rizz.inf'\'' ]'
+++ eval '[ -f '\''ai-rizz.inf'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 26 + 1
+++ __shunit_assertsPassed=27
++++ expr 28 + 1
+++ __shunit_assertsTotal=29
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_condition_
+++ return 0
+++ assertTrue 'Commit directory should exist' '[ -d '\''test_target/shared'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'Commit directory should exist' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='Commit directory should exist'
+++ shift
+++ shunit_condition_='[ -d '\''test_target/shared'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -d '\''test_target/shared'\'' ]' ']'
+++ expr '(' '[ -d '\''test_target/shared'\'' ]' + 0 ')' = '[ -d '\''test_target/shared'\'' ]'
+++ eval '[ -d '\''test_target/shared'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 27 + 1
+++ __shunit_assertsPassed=28
++++ expr 29 + 1
+++ __shunit_assertsTotal=30
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.Hzi44uYQLz
+++ date +%s.%N
++ __shunit_endCaseTime=1748242214.066740698
+++ _shunit_calc_bc 1748242214.066740698 - 1748242214.013479392
++++ echo 1748242214.066740698 - 1748242214.013479392
++++ command busybox bc
+++ _shunit_output_=.053261306
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .053261306
+++ case "${1}" in
+++ _shunit_format_result_=.053261306
++++ echo .053261306
++++ command sed 's/^\./0./g'
+++ _shunit_format_result_=0.053261306
++++ echo 0.053261306
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.053261306
++++ echo 0.053261306
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.053261306
+++ echo 0.053261306
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.053261306
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_updates_git_tracking"
    time="0.090507836"
    assertions="2"
  >
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_complex_ruleset_scenario"
    time="0.149847213"
    assertions="5"
  >
    <failure
      type="shunit.assertFail"
      message="File should exist: test_target/local/rule1.mdc"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_sync_after_modification"
    time="0.13820683"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_nonexistent_rule_graceful"
    time="0.053261306"
    assertions="2"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 5 + 1
++ __shunit_testsPassed=6
++ for _shunit_test_ in ${__shunit_suite}
++ __shunit_testSuccess=0
++ __shunit_assertsCurrentTest=0
++ __shunit_junitXmlCurrentTestCaseErrors=
++ endSkipping
++ __shunit_skip=1
+++ date +%s.%N
++ __shunit_startCaseTime=1748242214.077942810
++ setUp
+++ mktemp -d
++ TEST_DIR=/tmp/tmp.GX9kaoVD4B
++ cd /tmp/tmp.GX9kaoVD4B
++ command -v reset_ai_rizz_state
++ reset_ai_rizz_state
++ HAS_LOCAL_MODE=false
++ HAS_COMMIT_MODE=false
++ COMMIT_SOURCE_REPO=
++ LOCAL_SOURCE_REPO=
++ COMMIT_TARGET_DIR=
++ LOCAL_TARGET_DIR=
++ REPO_DIR=/tmp/tmp.GX9kaoVD4B/test_repo
++ mkdir -p /tmp/tmp.GX9kaoVD4B/test_repo/rules
++ mkdir -p /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset1
++ mkdir -p /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset2
++ echo 'Rule 1 content'
++ echo 'Rule 2 content'
++ echo 'Rule 3 content'
++ ln -sf /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset1/rule1.mdc
++ ln -sf /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule2.mdc /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset1/rule2.mdc
++ ln -sf /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule2.mdc /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset2/rule2.mdc
++ ln -sf /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule3.mdc /tmp/tmp.GX9kaoVD4B/test_repo/rulesets/ruleset2/rule3.mdc
++ cd /tmp/tmp.GX9kaoVD4B/test_repo
++ git init .
++ git add .
++ git commit -m 'Initial commit'
++ cd /tmp/tmp.GX9kaoVD4B
++ mkdir -p test_target/shared
++ git init .
++ git config user.email test@example.com
++ git config user.name 'Test User'
++ mkdir -p .git/info
++ touch .git/info/exclude
++ echo 'test_repo	test_target'
++ echo test_migrate_preserves_manifest_headers
test_migrate_preserves_manifest_headers
++ eval test_migrate_preserves_manifest_headers
+++ test_migrate_preserves_manifest_headers
+++ custom_dir=.custom/rules
+++ cmd_init test_repo -d .custom/rules --local
+++ source_repo=
+++ target_dir=
+++ mode=
+++ '[' 4 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ source_repo=test_repo
+++ shift
+++ '[' 3 -gt 0 ']'
+++ case "$1" in
+++ target_dir=.custom/rules
+++ shift 2
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' -z test_repo ']'
+++ '[' -z .custom/rules ']'
+++ '[' -z local ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' false = true ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -d .git ']'
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.GX9kaoVD4B/test_repo ']'
+++ return 0
+++ case "$mode" in
+++ mkdir -p .custom/rules/local
+++ echo ''
+++ write_manifest_with_entries ai-rizz.local.inf test_repo .custom/rules
+++ manifest_file=ai-rizz.local.inf
+++ source_repo=test_repo
+++ target_dir=.custom/rules
+++ echo 'test_repo	.custom/rules'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ setup_local_mode_excludes .custom/rules
+++ target_dir=.custom/rules
+++ update_git_exclude ai-rizz.local.inf add
+++ path=ai-rizz.local.inf
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^ai-rizz.local.inf$' .git/info/exclude
+++ echo ai-rizz.local.inf
+++ update_git_exclude .custom/rules/local add
+++ path=.custom/rules/local
+++ action=add
+++ mkdir -p .git/info
+++ touch .git/info/exclude
+++ case "$action" in
+++ grep -q '^.custom/rules/local$' .git/info/exclude
+++ echo .custom/rules/local
+++ HAS_LOCAL_MODE=true
+++ LOCAL_SOURCE_REPO=test_repo
+++ LOCAL_TARGET_DIR=.custom/rules
+++ echo 'Initialized ai-rizz with source: test_repo, target: .custom/rules, mode: local'
Initialized ai-rizz with source: test_repo, target: .custom/rules, mode: local
+++ return 0
+++ cmd_add_rule rule1.mdc --local
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=local
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z local ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init local
+++ target_mode=local
+++ case "$target_mode" in
+++ '[' true = false ']'
+++ case "$mode" in
+++ manifest_file=ai-rizz.local.inf
+++ target_dir=.custom/rules/local
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.GX9kaoVD4B/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc ']'
+++ '[' local = local ']'
+++ '[' false = true ']'
+++ '[' false = false ']'
+++ case "$mode" in
+++ '[' false = true ']'
+++ '[' '!' -w .custom/rules/local ']'
+++ add_manifest_entry_to_file ai-rizz.local.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.local.inf ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' false = false ']'
+++ return 0
+++ '[' false = true ']'
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf .custom/rules/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=.custom/rules/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p .custom/rules/local
+++ case "$target_directory" in
+++ find .custom/rules/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.WhTVcBJD7p
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc .custom/rules/local
+++ entry=rules/rule1.mdc
+++ target_directory=.custom/rules/local
+++ source_path=/tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc .custom/rules/local/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.WhTVcBJD7p
+++ '[' true = false ']'
+++ return 0
+++ cmd_add_rule rule1.mdc --commit
+++ mode=
+++ rules=
+++ '[' 2 -gt 0 ']'
+++ case "$1" in
+++ '[' -z '' ']'
+++ rules=rule1.mdc
+++ shift
+++ '[' 1 -gt 0 ']'
+++ case "$1" in
+++ mode=commit
+++ shift
+++ '[' 0 -gt 0 ']'
+++ '[' false = false ']'
+++ '[' true = false ']'
+++ validate_manifest_integrity
+++ '[' false = true ']'
+++ '[' -z commit ']'
+++ lazy_init_occurred=false
+++ needs_lazy_init commit
+++ target_mode=commit
+++ case "$target_mode" in
+++ '[' false = false ']'
+++ '[' true = true ']'
+++ lazy_init_mode commit
+++ target_mode=commit
++++ get_any_manifest_metadata
++++ '[' -f ai-rizz.inf ']'
++++ '[' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	.custom/rules'
++++ grep -q '	'
++++ echo 'test_repo	.custom/rules'
++++ return 0
+++ metadata='test_repo	.custom/rules'
++++ echo 'test_repo	.custom/rules'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	.custom/rules'
++++ cut -f2
+++ target_dir=.custom/rules
+++ case "$target_mode" in
+++ mkdir -p .custom/rules/shared
+++ echo ''
+++ write_manifest_with_entries ai-rizz.inf test_repo .custom/rules
+++ manifest_file=ai-rizz.inf
+++ source_repo=test_repo
+++ target_dir=.custom/rules
+++ echo 'test_repo	.custom/rules'
+++ IFS=
+++ read -r line
+++ '[' -n '' ']'
+++ IFS=
+++ read -r line
+++ HAS_COMMIT_MODE=true
+++ COMMIT_SOURCE_REPO=test_repo
+++ COMMIT_TARGET_DIR=.custom/rules
+++ lazy_init_occurred=true
+++ case "$mode" in
+++ manifest_file=ai-rizz.inf
+++ target_dir=.custom/rules/shared
+++ git_sync test_repo
+++ repo_url=test_repo
+++ case "$repo_url" in
+++ '[' '!' -d /tmp/tmp.GX9kaoVD4B/test_repo ']'
+++ return 0
+++ for rule in $rules
+++ case "$rule" in
+++ rule_path=rules/rule1.mdc
+++ '[' '!' -f /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc ']'
+++ '[' commit = local ']'
+++ '[' true = false ']'
+++ case "$mode" in
+++ '[' true = true ']'
+++ read_manifest_entries ai-rizz.local.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.local.inf
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ tail -n +2 ai-rizz.local.inf
+++ grep -v '^$'
+++ remove_manifest_entry_from_file ai-rizz.local.inf rules/rule1.mdc
+++ local_manifest_file=ai-rizz.local.inf
+++ entry=rules/rule1.mdc
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ read_manifest_metadata ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ read -r first_line
++++ echo 'test_repo	.custom/rules'
++++ grep -q '	'
++++ echo 'test_repo	.custom/rules'
+++ metadata='test_repo	.custom/rules'
++++ read_manifest_entries ai-rizz.local.inf
++++ grep -v '^rules/rule1.mdc$'
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
++++ echo 'test_repo	.custom/rules'
++++ cut -f1
+++ source_repo=test_repo
++++ echo 'test_repo	.custom/rules'
++++ cut -f2
+++ target_dir=.custom/rules
+++ echo 'test_repo	.custom/rules'
+++ '[' -n '' ']'
+++ '[' '!' -w .custom/rules ']'
+++ add_manifest_entry_to_file ai-rizz.inf rules/rule1.mdc
+++ target_manifest_file=ai-rizz.inf
+++ entry=rules/rule1.mdc
+++ '[' -f ai-rizz.inf ']'
+++ read_manifest_entries ai-rizz.inf
+++ grep -q '^rules/rule1.mdc$'
+++ manifest_file=ai-rizz.inf
+++ '[' '!' -f ai-rizz.inf ']'
+++ tail -n +2 ai-rizz.inf
+++ grep -v '^$'
+++ true
+++ echo rules/rule1.mdc
+++ echo 'Added rule: rules/rule1.mdc'
Added rule: rules/rule1.mdc
+++ sync_all_modes
+++ sync_success=true
+++ resolve_conflicts
+++ '[' true = false ']'
+++ '[' true = false ']'
+++ '[' '!' -f ai-rizz.inf ']'
+++ '[' '!' -f ai-rizz.local.inf ']'
++++ get_files_from_manifest ai-rizz.inf
+++ commit_files=rule1.mdc
+++ '[' -n rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.jwniIeTBdV
+++ echo rule1.mdc
+++ IFS=
+++ read -r filename
+++ '[' -n rule1.mdc ']'
+++ remove_local_entries_deploying_file rule1.mdc
+++ filename=rule1.mdc
++++ read_manifest_entries ai-rizz.local.inf
+++ local_entries=
+++ '[' -n '' ']'
+++ IFS=
+++ read -r filename
+++ rm -f /tmp/tmp.jwniIeTBdV
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.inf .custom/rules/shared
+++ manifest_file=ai-rizz.inf
+++ target_directory=.custom/rules/shared
+++ '[' '!' -f ai-rizz.inf ']'
+++ mkdir -p .custom/rules/shared
+++ case "$target_directory" in
+++ find .custom/rules/shared -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.inf
++++ manifest_file=ai-rizz.inf
++++ '[' '!' -f ai-rizz.inf ']'
++++ tail -n +2 ai-rizz.inf
++++ grep -v '^$'
+++ entries=rules/rule1.mdc
+++ '[' -n rules/rule1.mdc ']'
++++ mktemp
+++ temp_file=/tmp/tmp.rHs9TKzabX
+++ echo rules/rule1.mdc
+++ IFS=
+++ read -r entry
+++ '[' -n rules/rule1.mdc ']'
+++ copy_entry_to_target rules/rule1.mdc .custom/rules/shared
+++ entry=rules/rule1.mdc
+++ target_directory=.custom/rules/shared
+++ source_path=/tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc
+++ '[' -f /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc ']'
+++ cp /tmp/tmp.GX9kaoVD4B/test_repo/rules/rule1.mdc .custom/rules/shared/
+++ IFS=
+++ read -r entry
+++ rm -f /tmp/tmp.rHs9TKzabX
+++ '[' true = true ']'
+++ sync_manifest_to_directory ai-rizz.local.inf .custom/rules/local
+++ manifest_file=ai-rizz.local.inf
+++ target_directory=.custom/rules/local
+++ '[' '!' -f ai-rizz.local.inf ']'
+++ mkdir -p .custom/rules/local
+++ case "$target_directory" in
+++ find .custom/rules/local -maxdepth 1 -name '*.mdc' -type f -delete
++++ read_manifest_entries ai-rizz.local.inf
++++ manifest_file=ai-rizz.local.inf
++++ '[' '!' -f ai-rizz.local.inf ']'
++++ tail -n +2 ai-rizz.local.inf
++++ grep -v '^$'
++++ true
+++ entries=
+++ '[' -n '' ']'
+++ '[' true = false ']'
+++ return 0
++++ head -n1 ai-rizz.local.inf
+++ local_header='test_repo	.custom/rules'
++++ head -n1 ai-rizz.inf
+++ commit_header='test_repo	.custom/rules'
+++ assertEquals 'Headers should match after migration' 'test_repo	.custom/rules' 'test_repo	.custom/rules'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'Headers should match after migration' = --lineno ']'
+++ builtin '[' 3 -lt 2 -o 3 -gt 3 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 3 -eq 3 ']'
+++ shunit_message_='Headers should match after migration'
+++ shift
+++ shunit_expected_='test_repo	.custom/rules'
+++ shunit_actual_='test_repo	.custom/rules'
+++ shunit_return=0
+++ builtin '[' 'test_repo	.custom/rules' = 'test_repo	.custom/rules' ']'
+++ _shunit_assertPass
++++ expr 28 + 1
+++ __shunit_assertsPassed=29
++++ expr 30 + 1
+++ __shunit_assertsTotal=31
++++ expr 0 + 1
+++ __shunit_assertsCurrentTest=1
+++ unset shunit_message_ shunit_expected_ shunit_actual_
+++ return 0
+++ assert_file_exists .custom/rules/shared/rule1.mdc
+++ assertTrue 'File should exist: .custom/rules/shared/rule1.mdc' '[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]'
+++ eval '__shunit_lineno="";' if '${__SHUNIT_BUILTIN}' '[' '"${1:-}"' = '"--lineno"' ']' '&&' '${__SHUNIT_BUILTIN}' '[' -n '"${2:-}"' '];' then '__shunit_lineno="[${2}]";' shift '2;' 'fi;'
++++ __shunit_lineno=
++++ builtin '[' 'File should exist: .custom/rules/shared/rule1.mdc' = --lineno ']'
+++ builtin '[' 2 -lt 1 -o 2 -gt 2 ']'
+++ _shunit_shouldSkip
+++ builtin test 1 -eq 1
+++ return 1
+++ shunit_message_=
+++ builtin '[' 2 -eq 2 ']'
+++ shunit_message_='File should exist: .custom/rules/shared/rule1.mdc'
+++ shift
+++ shunit_condition_='[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]'
+++ shunit_return=0
+++ builtin '[' -z '[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]' ']'
+++ expr '(' '[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]' + 0 ')' = '[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]'
+++ eval '[ -f '\''.custom/rules/shared/rule1.mdc'\'' ]'
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_assertPass
++++ expr 29 + 1
+++ __shunit_assertsPassed=30
++++ expr 31 + 1
+++ __shunit_assertsTotal=32
++++ expr 1 + 1
+++ __shunit_assertsCurrentTest=2
+++ unset shunit_message_ shunit_condition_
+++ return 0
++ tearDown
++ cd /
++ rm -rf /tmp/tmp.GX9kaoVD4B
+++ date +%s.%N
++ __shunit_endCaseTime=1748242214.171181142
+++ _shunit_calc_bc 1748242214.171181142 - 1748242214.077942810
++++ echo 1748242214.171181142 - 1748242214.077942810
++++ command busybox bc
+++ _shunit_output_=.093238332
+++ shunit_return=0
+++ builtin '[' 0 -eq 0 ']'
+++ _shunit_float_format .093238332
+++ case "${1}" in
+++ _shunit_format_result_=.093238332
++++ command sed 's/^\./0./g'
++++ echo .093238332
+++ _shunit_format_result_=0.093238332
++++ echo 0.093238332
++++ command sed 's/0\+$//g'
+++ _shunit_format_result_=0.093238332
++++ echo 0.093238332
++++ command sed 's/\.$//g'
+++ _shunit_format_result_=0.093238332
+++ echo 0.093238332
+++ unset _shunit_format_result_
+++ shunit_return=0
+++ unset _shunit_output_
+++ return 0
++ _shunit_test_execution_time_=0.093238332
++ __shunit_junitXmlTestCases='
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_local_to_commit"
    time="0.101185139"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_rule_commit_to_local"
    time="0.093218317"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_ruleset_with_all_rules"
    time="0.117839633"
    assertions="6"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_other_rules"
    time="0.144116887"
    assertions="4"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_resolve_duplicate_entries_commit_wins"
    time="0.126039235"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_updates_git_tracking"
    time="0.090507836"
    assertions="2"
  >
    <failure
      type="shunit.assertFail"
      message="File should not be git-ignored after migration"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_complex_ruleset_scenario"
    time="0.149847213"
    assertions="5"
  >
    <failure
      type="shunit.assertFail"
      message="File should exist: test_target/local/rule1.mdc"
    />
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_sync_after_modification"
    time="0.13820683"
    assertions="3"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_nonexistent_rule_graceful"
    time="0.053261306"
    assertions="2"
  >
  </testcase>
  <testcase
    classname="test_conflict_resolution.test.sh"
    name="test_migrate_preserves_manifest_headers"
    time="0.093238332"
    assertions="2"
  >
  </testcase>'
++ builtin '[' 0 -eq 0 ']'
+++ expr 6 + 1
++ __shunit_testsPassed=7
++ unset _shunit_test_ _shunit_test_execution_time_
++ oneTimeTearDown
+++ date +%s.%N
++ __shunit_endSuiteTime=1748242214.182704192
++ _shunit_generateReport
++ builtin '[' 1 -eq 0 ']'
++ _shunit_ok_=0
++ builtin '[' 3 -gt 0 -o 0 -eq 1 ']'
++ _shunit_ok_=1
++ echo

++ _shunit_msg_='Ran \033[1;36m10\033[0m'
++ builtin '[' 10 -eq 1 ']'
++ echo -e 'Ran \033[1;36m10\033[0m tests.'
Ran [1;36m10[0m tests.
++ builtin '[' -n '' ']'
++ builtin '[' 1 -eq 0 ']'
++ _shunit_msg_='\033[1;31mFAILED\033[0m'
++ _shunit_msg_='\033[1;31mFAILED\033[0m (\033[1;31mfailures=2\033[0m'
++ builtin '[' 0 -gt 0 ']'
++ _shunit_msg_='\033[1;31mFAILED\033[0m (\033[1;31mfailures=2\033[0m)'
++ echo

++ echo -e '\033[1;31mFAILED\033[0m (\033[1;31mfailures=2\033[0m)'
[1;31mFAILED[0m ([1;31mfailures=2[0m)
++ __shunit_reportGenerated=0
++ unset _shunit_msg_ _shunit_ok_ _shunit_suite_execution_time_ _shunit_suite_start_time_preformatted_
++ builtin '[' 3 -eq 0 ']'
++ return 1
+ _shunit_cleanup EXIT
+ _shunit_name_=EXIT
+ _shunit_signal_=0
+ case "${_shunit_name_}" in
+ builtin '[' EXIT '!=' EXIT ']'
+ builtin '[' 1 -eq 1 ']'
+ __shunit_clean=0
+ tearDown
+ cd /
+ rm -rf /tmp/tmp.GX9kaoVD4B
++ date +%s.%N
+ __shunit_endCaseTime=1748242214.187059910
+ oneTimeTearDown
++ date +%s.%N
+ __shunit_endSuiteTime=1748242214.188628328
+ command rm -fr /tmp/shunit.5Fx659
+ builtin '[' EXIT '!=' EXIT ']'
+ builtin '[' 0 -eq 1 ']'
+ unset _shunit_name_ _shunit_signal_
